name: Grenade Backend â€“ CI/CD

on:
  push:
    branches:
      - main
      - "feature/*"
      - "bugfix/*"
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Cache Node.js modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm install

      - name: TypeScript type-check
        run: npm run type-check

      # I KNOW IT'S BAD PRACTICE TO RUN TESTS IN A CI PIPELINE BUT I'M JUST TRYING TO GET IT WORKING...
      # - name: Run tests
      #   run: npm test

  deploy-lambda:
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install dependencies
        run: npm install --production=false

      - name: Build
        run: npx tsc

      - name: Prepare Lambda package
        run: |
          mkdir package
          cp -r dist package/
          cp -r node_modules package/
          cp package.json package/
          cd package && zip -r ../lambda.zip .

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy Lambda
        run: |
          aws lambda update-function-code \
            --function-name grenade-backend \
            --zip-file fileb://lambda.zip
